@startuml
package テスト計画 {
 class テスト計画書
 class テストレベル
 class テストアイテム
 テスト計画書 -- テストレベル
 テスト計画書 -- テストアイテム

 class テストベース
 class テストプロスやテストレベルの移行基準
 class doneの定義
   doneの定義 -u-|> テストプロスやテストレベルの移行基準: <<is-a>>
 class 成果物のトレーサビリティに関する情報
}

package テストのモニタリングとコントロール {
 class テスト進捗レポート
 class テストサマリレポート
 note "マイルストーンごと" as testsummaryreport
 テストサマリレポート .. testsummaryreport
}

テストのモニタリングとコントロール .u.> doneの定義: <<use>>
テスト計画 .....> テスト進捗レポート : <<use>>
note on link: モニタリング結果を活用して随時更新


package テスト分析 {
 class テスト条件
 class テストチャーター
 note "探索的テストで使用" as testcharter
 テストチャーター .. testcharter
 class テストベースの欠陥レポート
}

テストベース <--d-> テスト条件: <<trace>>
テストレベル <--d-> テスト条件: <<trace>>
テストアイテム <--d-> テスト条件: <<trace>>

package テスト設計 {
  interface ハイレベルテストケース
  class 必要なテストデータの設計
  class テスト環境の設計
  class インフラストラクチャとツール
}

テスト条件 <---d-> ハイレベルテストケース: <<trace>>

package テスト実装 {
  interface ローレベルテストケース
  class 入力データ
  class 期待結果

  ローレベルテストケース o- 入力データ
  ローレベルテストケース o- 期待結果
  ローレベルテストケース ..u.> ハイレベルテストケース: <<implements>>

  class テストスクリプト
  テストスクリプト .u.> ローレベルテストケース: <<implements>>
}

package テスト実行 {
  class テストケースまたはテスト手順のステータスに関するドキュメント
  note "テスト実行可能、合格、不合格、ブロック、スキップ等" as status
  テストケースまたはテスト手順のステータスに関するドキュメント .. status
  class 欠陥レポート
  class テストアイテム、テスト対象、テストツール、テストウェアのドキュメント
}

テストケースまたはテスト手順のステータスに関するドキュメント ...u.> ローレベルテストケース
テスト実行 ........u.> テスト条件: <<revine>>
テスト実行 ...........u.> テスト進捗レポート: <<yields>>

package テスト完了 {
  class 次のテストサイクルへの持ち越しアイテム
  次のテストサイクルへの持ち越しアイテム ...u.> テストケースまたはテスト手順のステータスに関するドキュメント: 未実行のもの
  次のテストサイクルへの持ち越しアイテム ...u.> 欠陥レポート: 未修正のもの

  class 変更要求
  class 変更対応したテストウェア
}
テスト完了 ..............u.> テストサマリレポート: <<yields>>

@enduml
